import { defineStore } from 'pinia'

export const useQuizStore = defineStore('quiz', {
  state: () => ({
    score: 0, // Antall riktige svar
    totalQuestions: 0, // Totalt antall sp√∏rsm√•l
    currentQuizId: '', // üí° Tom streng istedenfor null for konsistens
  }),

  actions: {
    // Tilbakestiller quiz-status
    resetQuiz() {
      this.score = 0
      this.totalQuestions = 0
      this.currentQuizId = ''
    },

    // √òker poengsum med 1
    incrementScore() {
      this.score++
    },

    // Setter antall sp√∏rsm√•l
    setTotalQuestions(count) {
      this.totalQuestions = count
    },

    // Setter aktiv quiz-ID (f.eks. "math-intro")
    setCurrentQuizId(id) {
      this.currentQuizId = id || '' // fallback hvis id er undefined
    },
  },
})

// Sammendrag av hva denne filen gj√∏r:

// quiz.js definerer en Pinia-store kalt 'quiz'.

// Denne storen brukes til √• holde p√• og styre quiz-state som hele appen kan bruke:

// - **score**: Antall riktige svar brukeren har f√•tt.
// - **totalQuestions**: Totalt antall sp√∏rsm√•l i den n√•v√¶rende quizen.

// Den tilbyr tre actions:
// - `resetQuiz()` ‚Äî nullstiller quizdata (ny quiz).
// - `incrementScore()` ‚Äî √∏ker poengsummen n√•r brukeren svarer riktig.
// - `setTotalQuestions(count)` ‚Äî setter antall sp√∏rsm√•l i quizen n√•r vi har lastet dem inn.

// Hvordan det brukes:
// - I `QuizView.vue`: Vi bruker quizStore til √• oppdatere poengsum og antall sp√∏rsm√•l.
// - I `ResultView.vue`: Vi leser quizStore.score og quizStore.totalQuestions for √• vise resultatet.

// Konsept: En **Pinia store** gj√∏r det enkelt √• dele data mellom forskjellige komponenter, uten √• m√•tte sende props hele veien ned.
